std::vector<uint64_t> BigInt::addMagnitudes(const BigInt& rhs) const {

    std::vector<uint64_t> lhsVal = value; // in case need to push back 0 as seen below.
    std::vector<uint64_t> rhsVal = rhs.value; // don't want to edit the other BigInt either.
    uint64_t overflow = 0;
    std::vector<uint64_t> sumVec;
    auto largerSize = lhsVal > rhsVal ? lhsVal.size() : rhsVal.size();

    // below code's purpose is to add 0s if necessary to the one with fewer digits to simplify the addition.
    if (largerSize == lhsVal.size()) { 
      for (int i = rhsVal.size(); i < largerSize; i++) {
        rhsVal.push_back(0);
      }
    } else {
      for (int i = lhsVal.size(); i < largerSize; i++) {
        lhsVal.push_back(0); // don't want to do this to actual bit string, so do it to a copy.
      }
    }

    for (int i = 0; i < largerSize; i++) { // left as "smallerSize" cuz need to convert to largerSize.
    // add zeros to the extra missing places of the smaller one, then just run through the loop as normal.
      uint64_t sum = 0;

      sum = lhsVal[i] + rhsVal[i] + overflow; // overflow is +1 if there was any overflow from before, else 0

      if (sum < lhsVal[i]) { // overflowed. Sufficient to check if greater than just one of lhs[i] or rhs[i] 
        sumVec.push_back(sum); // the overflow is sum mod 2^64, since uint64_t overflows to positive numbers from 0
        overflow = 1; // to be added to the next non-overflowing spot.
      } else {
        sumVec.push_back(sum);
        overflow = 0;
      }

    }
    if (overflow == 1) { // if still have overflow after finishing 
      sumVec.push_back(overflow); // in the largest digits place
    }


    return sumVec;
}